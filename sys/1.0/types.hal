/**
 * Copyright @ 2013 - 2018 Suntec Software(Shanghai) Co., Ltd.
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are NOT permitted except as agreed by
 * Suntec Software(Shanghai) Co., Ltd.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

package iauto.hardware.sys@1.0;

/**
 * Specifies a enum which describe the storage type
 */
enum SysdStorageTypeID : int32_t {
    SYSD_STORAGE_PARTITION_DATA = 0,
    SYSD_STORAGE_PARTITION_MAP = 1,
};

/**
 * Specifies a enum which describe the system property name id
 */
enum SysdPropertyNameID : int32_t {
    TEST_PROPERTY_NAME_ID0 = 0,
    TEST_PROPERTY_NAME_ID1 = 1,
    TEST_PROPERTY_NAME_ID2 = 2,
    SYSD_PROPERTY_ID_AUTOTESTMODE = 3,
    SYSD_PROPERTY_ID_KERNER_VERSION = 4,
    SYSD_PROPERTY_ID_MICON_VERSION = 5,
    SYSD_PROPERTY_ID_AMIGOPROGRAM_VERSION = 6,
    SYSD_PROPERTY_ID_AMIGODATA_VERSION = 7,
    SYSD_PROPERTY_ID_SOC_VERSION = 8,
    SYSD_PROPERTY_ID_SETID_VERSION = 9,
    SYSD_PROPERTY_ID_POWERONMODE = 10,
};

/**
 * Specifies a enum which describe bsp boot mode
 */
 enum SysdBootMode : int32_t {
    SYSD_BOOTMODE_NORMAL = 0,
    SYSD_BOOTMODE_UPDATE = 1,
    SYSD_BOOTMODE_TESTMODE = 2,
    SYSD_BOOTMODE_USERUPDATE = 3,
    SYSD_BOOTMODE_CATCH_SNAPSHOT = 4,
    SYSD_BOOTMODE_SNAPSHOT = 5,
 };

/**
  * Specifies a enum which describe usb mode.
  */
 enum Usb1ModeEnum : int32_t {
     USB1_MODE_HOST = 0,
     USB1_MODE_DEVICE = 1,
 };

/**
 * Specifies a enum which describe adb with usb mode.
 */
 enum AdbWithUsbModeEnum : int32_t {
     ADB_WITH_USB_MODE_ON = 0,
     ADB_WITH_USB_MODE_OFF = 1,
 };

/**
  * Specifies a enum which describe adb with network mode.
  */
 enum AdbWithNetworkModeEnum : int32_t {
     ADB_WITH_NETWORK_MODE_ON = 0,
     ADB_WITH_NETWORK_MODE_OFF = 1,
 };

/**
  * Specifies a struct which describe vehicle authid info.
  */
 struct VehicleAuthIDInfo {
        uint8_t       brandName;
        uint8_t       vendorId;
        uint8_t[3]    modelNo;
        uint8_t       differenceCode;
        uint8_t[2]    year;
        uint8_t[2]    month;
        uint8_t[2]    day;
        uint8_t[4]    serialNum;
};

/**
  * @brief The defined about BSP/CFG/RAW in SysdManagerProxy/deviceiolib/sysdhidltypes are one-to-one,
  *        need modify together.
  */

/**
  * @brief Defines possible items of BSP data.
  */
  enum BspDataId : int32_t {
      BspDataId_Min,
      BspDataId_ActiveBootMode = BspDataId_Min,  ///< Boot Mode
      BspDataId_ActiveDebug,                     ///< debug on/off active flag.
      BspDataId_ActiveVdata,                     ///< Vdata A/B active flag.
      BspDataId_ActiveSys,                       ///< Sys A/B active flag.
      BspDataId_ActiveAmigo,                     ///< Amigo A/B active flag.
      BspDataId_ActiveSideInfo,                  ///< All side info.

      BspDataId_AllItem,                         ///< All of BSPData.
      BspDataId_Max
    };

/**
  * @brief Defines possible items of boot mode.
  */
  enum BootMode : int32_t {
      BootMode_Invalid = -1,
      BootMode_Normal,      ///< Normal
      BootMode_Update,      ///< Update
      BootMode_TestMode,    ///< TestMode
      BootMode_UserUpdate,  ///< UserUpdate
      BootMode_SpecialUserUpdate,    ///< SpecialUserUpdate
    };

/**
  * @brief Defines possible items of Vdata program sides.
  */
  enum VdataSide : int32_t {
      VdataSide_Invalid = -1,
      VdataSide_A,  ///< Vdata side A.
      VdataSide_B,  ///< Vdata side B.
    };

/**
  * @brief Defines possible items of Sys program sides.
  */
  enum SysSide : int32_t {
      SysSide_Invalid = -1,
      SysSide_A,  ///< Sys side A.
      SysSide_B,  ///< Sys side B.
    };

/**
  * @brief Defines possible items of Amigo program sides.
  */
  enum AmigoSide : int32_t {
      AmigoSide_Invalid = -1,
      AmigoSide_A,  ///< Amigo side A.
      AmigoSide_B,  ///< Amigo side B.
    };

/**
  * @brief Defines possible items of debugsw program sides.
  */
  enum DebugSide : int32_t {
      Debugsw_Invalid = -1,
      Debugsw_off,  ///< debug off 0.
      Debugsw_on,  ///< debug on 1.
    };

/**
  * @brief This structure is used to describe all of activeside.
  *
  */
  struct ActiveSide {
      VdataSide      Vdata;                                    ///< Vdata A/B active flag.
      SysSide        Sys;                                      ///< Sys A/B active flag.
      AmigoSide      Amigo;                                    ///< Amigo A/B active flag.
    };

/**
  * @brief This structure is used to describe all of bspdata.
  *
  */
  struct BspInfo {
      BootMode       mode;                                     ///< boot mode
      DebugSide      debugsw;                                  ///< debug on/off active flag.
      VdataSide      Vdata;                                    ///< Vdata A/B active flag.
      SysSide        Sys;                                      ///< Sys A/B active flag.
      AmigoSide      Amigo;                                    ///< Amigo A/B active flag.
    };

/**
  * @brief Defines possible items of config data.
  */
  enum CfgDataId : int32_t {
        CfgDataId_Min,
        CfgDataId_CameraType = CfgDataId_Min,    // camera type
        CfgDataId_Max
    };

/**
  * @brief Defines possible items of camera type.
  */
  enum CameraType : int32_t {
        CameraType_Invalid,
        CameraType_RVC,  // RVC camera.
        CameraType_AVM,  // AVM camera.
    };

/**
  * @brief This structure is used to describe all of cfgdata.
  */
  struct CfgInfo {
      CameraType     camera_type;                             // camera type
    };

/**
  * @brief raw data item id.
  */
  enum RawDataId : int32_t {
        INFO_INDEX_RBST = 2,    // rgb_brightness_step
        INFO_INDEX_YBST,    // yuv_brightness_step
        INFO_INDEX_SBST,    // second camera view backlight brightness step
        INFO_INDEX_RCST,    // rgb_contrast_step
        INFO_INDEX_YCST,    // yuv_contrast_step
        INFO_INDEX_SCST,    // second camera view contrast step
        INFO_INDEX_YCLR,    // camera view colar
        INFO_INDEX_SCLR,    // second camera view colar
        INFO_INDEX_YCDP,    // camera view colar depth
        INFO_INDEX_SCDP,    // second camera view colar depth
        INFO_INDEX_YBLV,    // camera view black level
        INFO_INDEX_SBLV,    // second camera view black level
        INFO_INDEX_ADCG,    // config for ad picture A/B
        INFO_INDEX_LGTP,    // languange type
        INFO_INDEX_GDLE,    // guideline setting

        INFO_INDEX_MAX,
    };

/**
  * @brief raw data return value.
  */
  enum RawDataReturn : int32_t {
        RETURN_OK = 0,
        RETURN_PARAMETER_ERROR,
        RETURN_SIGNATURE_ERROR,
        RETURN_READ_ERROR,
        RETURN_WRITE_ERROR,
        RETURN_CRC_ERROR,
        RETURN_ERROR,
  };