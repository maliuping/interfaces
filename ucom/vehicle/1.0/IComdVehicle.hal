/**
 * Copyright @ 2013 - 2015 Suntec Software(Shanghai) Co., Ltd.
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are NOT permitted except as agreed by
 * Suntec Software(Shanghai) Co., Ltd.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

package iauto.hardware.ucom.vehicle@1.0;

import IComdVehicleListener;

interface IComdVehicle {
    /**
     * @brief Client register IComdVehicleListener remote pointer in comd
     *        vehicle service
     *
     * @param [IN] listener: Client remote sp IComdVehicleListener pointer
     * @param [IN] serviceId: Client identity defined in comd
     * @param [IN] eventIds: The events that client want to monitor
     *
     * @return Comd excute result
     *
     * @retval EN_VEHICLE_RESULT_OK:        OK
     * @retval EN_VEHICLE_RESULT_ERR_PARA:  Parameter error
     * @retval EN_VEHICLE_RESULT_ERR_SERV:  Server error
     *
     * Adaptive Project: Morley
     *
     * Every client want any IComdVehicleListener's event must call this
     * function
     */
    registerListener(IComdVehicleListener listener
                     , EnComdVehicleListenerID serviceId
                     , EnComdVehicleEventIds eventIds)
        generates(EnComdVehicleFuncResult funcResult);

    /**
     * @brief Client remove registration information in comd vehicle service
     *
     * @param [IN] serviceId: Client identity defined in comd
     *
     * @return Comd excute result
     *
     * @retval EN_VEHICLE_RESULT_OK:        OK
     * @retval EN_VEHICLE_RESULT_ERR_PARA:  Parameter error
     * @retval EN_VEHICLE_RESULT_ERR_SERV:  Server error
     *
     * Adaptive Project: Morley
     *
     * Every client must call this function when he don't need any comd events
     */
    unRegisterListener(EnComdVehicleListenerID serviceId)
        generates(EnComdVehicleFuncResult funcResult);

    /**
     * @brief Client requests vehicle can message from micon
     *
     * @param [IN] canMsg: The vehicle can messages that client wants to send to micon
     *
     * @return Comd excute result
     *
     * @retval EN_VEHICLE_RESULT_OK:        OK
     * @retval EN_VEHICLE_RESULT_ERR_PARA:  Parameter error
     * @retval EN_VEHICLE_RESULT_ERR_SERV:  Server error
     *
     * Adaptive Project: Morley
     */
    vehicleFuncVcanSendMsg(StComdVehicleVcanMsg canMsg)
        generates(EnComdVehicleFuncResult funcResult);

    /**
     * @brief Client get vehicle status from comd
     *
     * @param None
     *
     * @return status: vehicle status
     * @return funcResult: Comd excute result
     *
     * Adaptive Project: Morley
     *
     * If comd don't get the data from micon, the status will be UNKNOWN.
     * However, comd will use notifyVehicleFuncVehicleStatusResp in
     * IComdVehicleListener to inform client after get the newest
     * data from micon.
     */
    vehicleFuncVehicleStatusGet()
        generates(StComdVehicleVehicleStatus status
                  , EnComdVehicleFuncResult funcResult);

    /**
     * @brief Client get steering angle & camera data from comd
     *
     * @param None
     *
     * @return data: steering angle & camera data
     * @return funcResult: Comd excute result
     *
     * Adaptive Project: Morley
     *
     * If comd don't get the data from micon, the status will be UNKNOWN.
     * However, comd will use notifyVehicleFuncSteeringAngleCameraDataResp
     * in IComdVehicleListener to inform client after get the newest
     * data from micon.
     */
    vehicleFuncSteeringAngleCameraDataGet()
        generates(StComdVehicleSteeringAngleCameraData data
                  , EnComdVehicleFuncResult funcResult);

    /**
     * @brief Client get seat data from comd
     *
     * @param None
     *
     * @return data: seat data
     * @return funcResult: Comd excute result
     *
     * Adaptive Project: Morley
     *
     * If comd don't get the data from micon, the status will be UNKNOWN.
     * However, comd will use notifyVehicleFuncSeatDataResp in
     * IComdVehicleListener to inform client after get the newest
     * data from micon.
     */
    vehicleFuncSeatDataGet()
        generates(StComdVehicleSeatData data
                  , EnComdVehicleFuncResult funcResult);

    /**
     * @brief Client get avm data from comd
     *
     * @param None
     *
     * @return data: avm data
     * @return funcResult: Comd excute result
     *
     * Adaptive Project: Morley
     *
     * If comd don't get the data from micon, the status will be UNKNOWN.
     * However, comd will use notifyVehicleFuncAvmDataResp in
     * IComdVehicleListener to inform client after get the newest
     * data from micon.
     */
    vehicleFuncAvmDataGet()
        generates(StComdVehicleAvmData data
                  , EnComdVehicleFuncResult funcResult);

    /**
     * @brief Client get fota data from comd
     *
     * @param None
     *
     * @return data: fota data
     * @return funcResult: Comd excute result
     *
     * Adaptive Project: Morley
     *
     * If comd don't get the data from micon, the status will be UNKNOWN.
     * However, comd will use notifyVehicleFuncFotaDataResp in
     * IComdVehicleListener to inform client after get the newest
     * data from micon.
     */
    vehicleFuncFotaDataGet()
        generates(StComdVehicleFotaData data
                  , EnComdVehicleFuncResult funcResult);

    /**
     * @brief Client get day night mode from comd
     *
     * @param None
     *
     * @return mode: day night mode
     * @return funcResult: Comd excute result
     *
     * Adaptive Project: Morley
     *
     * If comd don't get the data from micon, the status will be UNKNOWN.
     * However, comd will use notifyVehicleFuncDayNightModeResp in
     * IComdVehicleListener to inform client after get the newest
     * data from micon.
     */
    vehicleFuncDayNightModeGet()
        generates(EnComdVehicleDayNightMode mode
                  , EnComdVehicleFuncResult funcResult);
};
