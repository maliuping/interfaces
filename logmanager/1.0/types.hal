package iauto.hardware.logmanager@1.0;


enum LOG_SRV_ERROR_TYPE : uint16_t {
    LOG_ERROR_KERNEL_CRASH = 0,                 ///kernel crash 発生時
    LOG_ERROR_KERNEL_WDTO,                      ///kernel WDT T.O.発生時
    LOG_ERROR_NATIVE_CODE_ABORT,                ///Native Code の強制終了
    LOG_ERROR_APPLICATION_NOT_RESPONDING,       ///ANR時
    LOG_ERROR_BG_APPLICATION_NOT_RESPONDING,    ///Background ANR時
    LOG_ERROR_SYSTEM_SERVER_WDTO,               ///Android Watchdog 発生時
    LOG_ERROR_HWLOG_NOTIFY,                     ///hardware error
    LOG_ERROR_RESET_MICON_STACK_OVERFLOW,       ///Micon Task Stack溢出再起動通知
    LOG_ERROR_RESET_MICON_ILLEGAL_ADDR,         ///Micon Illegal address異常再起動通知
    LOG_ERROR_RESET_MICON_WDTO,                 ///Micon Watchdag異常再起動通知
    LOG_ERROR_RESET_MICON_LVI,                  ///Micon LVI異常再起動通知
    LOG_ERROR_RESET_MICON_PLL_CLOCK,            /// PLL CLOCK異常再起動通知
    LOG_ERROR_RESET_MICON_AMIGO,                ///Amigo異常再起動通知
    LOG_ERROR_RESET_SOC_TIMER_COM,              ///SOC 定期通信异常重启通知
    LOG_ERROR_RESET_SOC_INIT_COM,               ///SOC 初期通信异常重启通知
    LOG_ERROR_RESET_SOC_OFF_READY,              ///SOC OFF READY异常重启通知
    LOG_ERROR_RESET_SOC_WDTO,                   ///SOC WDTリセット監視再起動通知


};

struct LOG_SRV_ERROR_INFO {
	LOG_SRV_ERROR_TYPE eErrorType;
    uint32_t iOccurTime;
};


enum LOG_SRV_UPLOAD_STATUS : uint16_t {
    LOG_SRV_UPLOAD_BEGIN = 0,
    LOG_SRV_UPLOAD_SUCCESS,
    LOG_SRV_UPLOAD_FAILED,

};